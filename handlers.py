import requests
import random

from datetime import datetime, timedelta
from utils.storage import get_user_data, update_user_data
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from utils.horoscope_data import get_horoscope
from config import WEATHER_API_KEY

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
ASK_SIGN = 1

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /points
async def points(update, context):
  user_id = update.effective_user.id
  user_data = get_user_data(user_id)
  
  last_points_time = user_data.get("last_points")
  now = datetime.now()
  
  if last_points_time:
    last_points_time = datetime.fromisoformat(last_points_time)
    if now - last_points_time < timedelta(hours=6):
      remaining_time = timedelta(hours=6) - (now - last_points_time)
      hours, remainder = divmod(remaining_time.seconds, 3600)
      minutes, _ = divmod(remainder, 60)
      await update.message.reply_text(
        f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Ç—É–±—Ä–∏–∫–∏. –°–ª–µ–¥—É—é—â–∏–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω."
      )
      return

  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—É–±—Ä–∏–∫–æ–≤
  earned_points = random.randint(1, 100)
  new_balance = user_data["balance"] + earned_points
  update_user_data(user_id, balance=new_balance, last_points=now.isoformat())

  await update.message.reply_text(
    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {earned_points} —Ç—É–±—Ä–∏–∫–æ–≤! –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ç—É–±—Ä–∏–∫–æ–≤."
  )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /horoscope
async def horoscope(update: Update, context: ContextTypes.DEFAULT_TYPE):
  await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–≤–µ–Ω, –¢–µ–ª–µ—Ü, –ë–ª–∏–∑–Ω–µ—Ü—ã):")
  return ASK_SIGN

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
async def get_sign(update: Update, context: ContextTypes.DEFAULT_TYPE):
  user_sign = update.message.text.capitalize()
  horoscope_text = get_horoscope(user_sign)
  await update.message.reply_text(horoscope_text)
  return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ /weatherMOS
async def weather_mos(update, context):
  city = "Moscow"
  url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&lang=ru&appid={WEATHER_API_KEY}"
  
  try:
    response = requests.get(url)
    data = response.json()
    
    if data["cod"] == 200:
      city_name = data["name"]
      temp = data["main"]["temp"]
      weather = data["weather"][0]["description"]
      
      message = (
        f"–ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"üå• –û–ø–∏—Å–∞–Ω–∏–µ: {weather.capitalize()}"
      )
    else:
      message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
  except Exception as e:
    message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    print(f"–û—à–∏–±–∫–∞: {e}")
    
  await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /weatherROS
async def weather_ros(update, context):
  city = "Rostov-on-Don"
  url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&lang=ru&appid={WEATHER_API_KEY}"
  
  try:
    response = requests.get(url)
    data = response.json()
    
    if data["cod"] == 200:
      city_name = data["name"]
      temp = data["main"]["temp"]
      weather = data["weather"][0]["description"]
      
      message = (
        f"–ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"üå• –û–ø–∏—Å–∞–Ω–∏–µ: {weather.capitalize()}"
      )
    else:
      message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."
  except Exception as e:
    message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    print(f"–û—à–∏–±–∫–∞: {e}")
    
  await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /happyny
async def happyny(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    new_year = datetime(year=now.year + 1, month=1, day=1)
    remaining_time = new_year - now
    days = remaining_time.days
    hours, remainder = divmod(remaining_time.seconds, 3600)
    minutes, _ = divmod(remainder, 60)
    message = (
        f"–î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {days}–¥:{hours}—á:{minutes}–º. "
        f"–ü–æ—Ä–∞ –¥—É–º–∞—Ç—å, –∫–∞–∫ –±—É–¥–µ–º —Ç—É—Å–∏—Ç—å! üéâ"
    )
    await update.message.reply_text(message)